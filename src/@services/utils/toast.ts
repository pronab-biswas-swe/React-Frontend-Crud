import { ToastPromiseParams, toast as toastify } from "react-toastify";
import { Id, ToastOptions, TypeOptions } from "react-toastify/dist/types";

export const toast = {
  success: (message: string): Id => toastify.success(message || "рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ"),
  error: (message: string): Id =>
    toastify.error(
      message || "ржжрзБржГржЦрж┐ржд! ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      {
        autoClose: 5000,
      }
    ),
  info: (message: string): Id => toastify.info(message || "ржХрж┐ржЫрзБ рждржерзНржп"),
  warning: (message: string): Id =>
    toastify.warning(message || "рж╕рждрж░рзНржХрзАржХрж░ржг", {
      autoClose: 5000,
    }),
  promise: (
    callBack: Promise<unknown>,
    { pending, error, success }: ToastPromiseParams,
    options?: ToastOptions
  ): any =>
    toastify.promise(
      callBack,
      {
        pending: pending || "ржкрзНрж░рж╕рзНрждрзБржд рж╣ржЪрзНржЫрзЗ...",
        success: success || "рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ ЁЯСН",
        error: error || "ржжрзБржГржЦрж┐ржд! рж╕ржлрж▓ рж╣рзЯржирж┐",
      },
      { position: "top-center", theme: "light", ...options }
    ),
  loading: (message?: string): Id =>
    toastify.loading(message || "ржкрзНрж░рж╕рзНрждрзБржд рж╣ржЪрзНржЫрзЗ...", {
      theme: "light",
      position: "top-center",
    }),
  update: (
    toastId: Id,
    message: string,
    type: TypeOptions,
    isLoading: boolean = false
  ): void =>
    toastify.update(toastId, {
      render: message,
      type,
      isLoading,
      autoClose: 4000,
    }),
};

export const withToastLoader = (
  callBack: (
    success: (value?: unknown) => void,
    error: (reason?: any) => void
  ) => void
) => {
  toast.promise(new Promise((resolve, reject) => callBack(resolve, reject)), {
    success: "рж╕ржлрж▓ ржнрж╛ржмрзЗ ржкрзНрж░рж╕рзНрждрзБржд рж╣рзЯрзЗржЫрзЗ ЁЯСН",
  });
};
